/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rsaarchivo;
import java.io.*;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.*;
/**
 *
 * @author bartt
 */
public class Principal extends javax.swing.JFrame {
    
    cifrado  cifrar = new cifrado ();
    String code = "";

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ELTESTO = new javax.swing.JTextField();
        ENCRIPTO = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Cif = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("EL RSA M√ÅS PRO :V.");

        jLabel2.setText("Introduce el texto");

        jLabel3.setText("Resultado:");

        ELTESTO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ELTESTOActionPerformed(evt);
            }
        });

        ENCRIPTO.setText("ENCRIPAR");
        ENCRIPTO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ENCRIPTOActionPerformed(evt);
            }
        });

        Cif.setEditable(false);
        Cif.setColumns(20);
        Cif.setRows(5);
        jScrollPane1.setViewportView(Cif);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(314, 314, 314)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(44, 44, 44)
                        .addComponent(ELTESTO, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ENCRIPTO))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ELTESTO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ENCRIPTO))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ENCRIPTOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ENCRIPTOActionPerformed
        code = ELTESTO.getText();
        
        try {
            Cif.setText(cifradoRSA(code));
            // TODO add your handling code here:
        } catch (Exception ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ENCRIPTOActionPerformed
    
    public String cifradoRSA(String texto) throws Exception{
        // TODO code application logic here
        String Cifrado = "";
        //iniciamos con la generacion de las llaves
        KeyPairGenerator keypairgenerator = KeyPairGenerator.getInstance("RSA");
        
        //generacion de llaves a partir de la clase
        
        KeyPair llaves = keypairgenerator.generateKeyPair();
        //System.out.println("uwu");
        //llave publica
        PublicKey llavepublica = llaves.getPublic();
        
        
        //llave privada
        PrivateKey llaveprivada = llaves.getPrivate();
        
        //vamos a crear un metodo que se encargue de guardar en un fichero dicha llave
        
        guardarLlave(llavepublica, "publickey.key");
        
        //cargar la llave de un fichero
        
        llavepublica = cargarLlave("publickey.key");
        
        guardarLlave(llaveprivada, "privatekey.key");
        
        llaveprivada = cargarLLave("privatekey.key");
        
        
        //obtener la clase del cifrado
        rsa = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        //cifrado rsa que es asimetrico, por bloques y con relleno
        
        //cifrar
        rsa.init(Cipher.ENCRYPT_MODE, llavepublica);
        
        //nuestro arreglo de byte
        byte[] encriptado = rsa.doFinal(texto.getBytes());
        
        
        //vamos a escribir en el cifrado y ver los caracteres visibles
        
        for(byte b : encriptado){
            System.out.print("Cifrado: "+ Integer.toHexString(0xFF & b));
            
            Cifrado += Integer.toHexString(0xFF & b);
            
        }
        System.out.println();
        
        
        //descifrado
        rsa.init(Cipher.DECRYPT_MODE, llaveprivada);
        
        byte[] descencriptar = rsa.doFinal(encriptado);
        
        String textoDecifrado = new String(descencriptar);
        
        System.out.println("Descifrado: "+ textoDecifrado);
        
        return Cifrado;
    }
    
    private void ELTESTOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ELTESTOActionPerformed
        
    }//GEN-LAST:event_ELTESTOActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    private static Cipher rsa;

    /**
     * @param args the command line arguments
     */
    
    
    private static void guardarLlave(Key llave, String archivo) throws FileNotFoundException, IOException {
        byte[] llaves = llave.getEncoded(); //recibo una llave publica o privada
        
        //generar la salida de un archivo para guardar esa llave publica o privada
        FileOutputStream fos = new FileOutputStream(archivo);
        //escribe la llave publica o privada
        fos.write(llaves);
        fos.close();
    }


    private static PublicKey cargarLlave(String archivo) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
        //vamos a generar el archivo que se cargar
        FileInputStream fis = new FileInputStream(archivo);
        int numBytes = fis.available();
        byte[] bytes = new byte[numBytes];
        fis.read(bytes);
        fis.close();
        
        //ahora falta el tratamiento a la llave publica
        KeyFactory keyfactor = KeyFactory.getInstance("RSA");
        //vamos a darle un formato de salida a la llave publica para que se pueda visualizar 
        //para ello necesitamos ocupar el certificado x509 de codificacion de llaves
        KeySpec keyspec = new X509EncodedKeySpec(bytes);
        //ya que tiene formato
        //vamos a necesitar a la clase para poder importar el elemento
        PublicKey llaveparaBytes = keyfactor.generatePublic(keyspec);
        //retorno mi variable
        return llaveparaBytes;
        
    }


    private static PrivateKey cargarLLave(String archivo) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
        //vamos a generar el archivo que se cargar
        FileInputStream fis = new FileInputStream(archivo);
        int numBytes = fis.available();
        byte[] bytes = new byte[numBytes];
        fis.read(bytes);
        fis.close();
        
        //para una llave privada se necesita el certificado que viene por parte
        //de PKCS8 para certificarlas
         KeyFactory keyfactor = KeyFactory.getInstance("RSA");
         
         KeySpec keyspec = new PKCS8EncodedKeySpec(bytes);
         
         PrivateKey llaveparaBytes = keyfactor.generatePrivate(keyspec);
         
         return llaveparaBytes;
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Cif;
    private javax.swing.JTextField ELTESTO;
    private javax.swing.JButton ENCRIPTO;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private static class cifrado {

        public cifrado() {
        }
    }
}
